//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlatformFighterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PlatformFighter.Input
{
    public partial class @PlatformFighterControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlatformFighterControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlatformFighterControls"",
    ""maps"": [
        {
            ""name"": ""Fighting"",
            ""id"": ""8896f200-110d-4c8b-aa4a-6d5c63808f63"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a563eaad-f46a-41fa-b5b5-d2d0812a95e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""971ab230-e8ff-4efc-a713-69733e4df5d5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""42ee7ea4-7ea0-447d-92e4-da0c96d789fc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dad25772-1e08-486c-94ea-31db99ca11f2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5590b9ee-aeb3-4920-a0e3-2fa5eb33c546"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ee8c6465-0308-4c5b-b677-2beb8a46ac80"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Fighting
            m_Fighting = asset.FindActionMap("Fighting", throwIfNotFound: true);
            m_Fighting_Movement = m_Fighting.FindAction("Movement", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Fighting
        private readonly InputActionMap m_Fighting;
        private IFightingActions m_FightingActionsCallbackInterface;
        private readonly InputAction m_Fighting_Movement;
        public struct FightingActions
        {
            private @PlatformFighterControls m_Wrapper;
            public FightingActions(@PlatformFighterControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Fighting_Movement;
            public InputActionMap Get() { return m_Wrapper.m_Fighting; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FightingActions set) { return set.Get(); }
            public void SetCallbacks(IFightingActions instance)
            {
                if (m_Wrapper.m_FightingActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_FightingActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_FightingActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_FightingActionsCallbackInterface.OnMovement;
                }
                m_Wrapper.m_FightingActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                }
            }
        }
        public FightingActions @Fighting => new FightingActions(this);
        public interface IFightingActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
    }
}
